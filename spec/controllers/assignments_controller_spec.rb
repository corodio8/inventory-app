require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe AssignmentsController do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # update the return value of this method accordingly.
  def valid_attributes 
    valid_attributes = FactoryGirl.attributes_for(:assignment)
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # usersController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  before(:each) do
    request.env["HTTP_REFERER"] = "where_i_came_from"
  end


  describe "GET index" do
    it "assigns assignments as @assignment" do
      Assignment.any_instance.stubs(:valid?).returns(true)
      assignment = FactoryGirl.create :associated_assignment
      get :index, {}, valid_session
      assigns(:assignments).should eq([assignment])
    end
    
    it "only assigns most recent assign_date per computer_id to @assignment" do
      Assignment.any_instance.stubs(:valid?).returns(true)
      2.times { FactoryGirl.create(:assignment, computer_id: 1) }
      FactoryGirl.create(:computer, id: 1)
      get :index, {}, valid_session
      assigns(:assignments).should have(1).Assignment
    end

    it "assigns 2 computer_id to @assignment for different ids" do
      pending ("Issues with Associations") do
      Assignment.any_instance.stubs(:valid?).returns(true)
      2.times { 
        FactoryGirl.create(:associated_assignment)
        FactoryGirl.create(:dummy_assignment)
      }
      get :index, {}, valid_session
      assigns(:assignments).should have(2).Assignment
      end
    end

    it "warns if there exists a computer with 0 assignments" do
      FactoryGirl.create :computer
      get :index, {}, valid_session
      flash[:alert].should_not be_nil
    end
                        

  end

  describe "GET show" do
    it "assigns the requested assignment as @assignment" do
      Assignment.any_instance.stubs(:valid?).returns(true)
      assignment = FactoryGirl.create(:assignment)
      get :show, {:id => assignment.to_param}, valid_session
      assigns(:assignment).should eq(assignment)
    end
  end

  describe "POST new" do
    
    it "assigns a new assignment as @assignment" do
      User.any_instance.stubs(:valid?).returns(true)
      assignment_attr = FactoryGirl.attributes_for(:single_assignment)
      get :new, assignment_attr, valid_session
      assigns(:assignment).should_not be_a_new(Assignment)
    end
    
    it "with assign_date is taken for @computer, fail and go :back" do
      pending "WIP"
      FactoryGirl.create :single_assignment
        put :new, {:user_id => 1,
                   :computer_id => 1,
                   :assign_date => 11-11-2008}
        assigns(:assignment).should eq(nil)
        response.should redirect_to "where_i_came_from"
    end

    it "with assigned user already current, fail and go :back" do
      FactoryGirl.create :single_assignment
        put :new, {:user_id => 1,
                   :computer_id => 1,
                   :assign_date => 11-11-2008}
        assigns(:assignment).should be_nil
        response.should redirect_to "where_i_came_from"
    end

  end

  describe "GET edit" do
    it "assigns the requested assignment as @assignment" do
      Assignment.any_instance.stubs(:valid?).returns(true)
      assignment = FactoryGirl.create(:assignment)
      get :edit, {:id => assignment.to_param}, valid_session
      assigns(:assignment).should eq(assignment)
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "assigns the requested assignment as @assignment" do
        assignment = FactoryGirl.create(:assignment)
        put :update, {:id => assignment.to_param, :assignment => FactoryGirl.attributes_for(:assignment_date_only)}, valid_session
        assigns(:assignment).should eq(assignment)
      end

      it "redirects to the assignment" do
        assignment = FactoryGirl.create(:assignment)
        put :update, {:id => assignment.to_param, :assignment => valid_attributes}, valid_session
        response.should redirect_to(assignment)
      end
    end

    describe "with invalid params" do
      it "assigns the assignment as @assignment" do
        assignment = FactoryGirl.create(:assignment)
        # Trigger the behavior that occurs when invalid params are submitted
        Assignment.any_instance.stubs(:save).returns(false)
        put :update, {:id => assignment.to_param, :assignment => FactoryGirl.attributes_for(:assignment_date_only)}, valid_session
        assigns(:assignment).should eq(assignment)
      end

      it "re-renders the 'edit' template" do
        assignment = FactoryGirl.create(:assignment)
        # Trigger the behavior that occurs when invalid params are submitted
        Assignment.any_instance.stubs(:save).returns(false)
        put :update, {:id => assignment.to_param, :assignment => FactoryGirl.attributes_for(:assignment)}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested user" do
      assignment = FactoryGirl.create(:assignment)
      expect {
        delete :destroy, {:id => assignment.to_param}, valid_session
      }.to change(Assignment, :count).by(-1)
    end

    it "redirects to the users list" do
      assignment = FactoryGirl.create(:assignment)
      delete :destroy, {:id => assignment.to_param}, valid_session
      response.should redirect_to(assignments_url)
    end

    it "fails if it is root (IT) assignment" do
      pending "WIP"
        assigns(:assignments).should have(1).Assignment
    end
  end

  describe "GET history" do
    it "assigns all assignments to @assignments" do
      Assignment.any_instance.stubs(:valid?).returns(true)
      assignment = FactoryGirl.create(:assignment)
      get :history, {}, valid_session
      assigns(:assignments).should eq([assignment])
    end
  end

  describe "PUT report" do

    #fname tests
    describe "with matching FNAME" do
      it "assigns assignments which user_id's fname match to @assignments" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => 'John',
                      :lname => '',
                      :start_date => '',
                      :end_date => ''
        }, valid_session
        assigns(:assignments).should eq([assignment])
      end
    end

    describe "with non-matching FNAME" do
      it "assigns nothing" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => 'Robert',
                      :lname => '',
                      :start_date => '',
                      :end_date => ''
        }, valid_session
        assigns(:assignments).should have(0).Assignment
      end
    end

    describe "with partial match on FNAME" do
      it "assigns assignments which user_id's fname match to @assignments" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => 'Jo',
                      :lname => '',
                      :start_date => '',
                      :end_date => ''
        }, valid_session
          assigns(:assignments).should eq([assignment])
      end
    end
    
    #lname tests
    describe "with LNAME" do
      it "matching assigns lname-matched @assignments" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => '',
                    :lname => 'Smith',
                    :start_date => '',
                    :end_date => ''
        }, valid_session
        assigns(:assignments).should eq([assignment])
      end

      it "not matching assigns nothing" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => '',
                   :lname => 'Greens',
                   :start_date => '',
                   :end_date => ''
        }, valid_session
        assigns(:assignments).should have(0).Assignment
      end

      it "partially matching assigns lname-matched @assignments" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => '',
                   :lname => 'Sm',
                   :start_date => '',
                   :end_date => ''
        }, valid_session
        assigns(:assignments).should eq([assignment])
      end
    end

    #start_date tests
    describe "with start_date" do
      it "returns assignment dates matching" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => '',
                  :lname => '',
                  :start_date => '11-11-2008',
                  :end_date => ''
        }, valid_session
        assigns(:assignments).should eq([assignment])
      end

      it "returns assignments dates after" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => '',
                  :lname => '',
                  :start_date => '11-11-2007',
                  :end_date => ''
        }, valid_session
        assigns(:assignments).should eq([assignment])
      end

      it "returns no assignments dates before" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => '',
                  :lname => '',
                  :start_date => '11-11-2009',
                  :end_date => ''
        }, valid_session
        assigns(:assignments).should have(0).Assignment
      end
    end

    #end_date tests
    describe "with end_date" do
      it "returns assignment dates matching" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => '',
                  :lname => '',
                  :start_date => '',
                  :end_date => '11-11-2008'
        }, valid_session
        assigns(:assignments).should eq([assignment])
      end

      it "returns assignments dates before" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => '',
                  :lname => '',
                  :start_date => '',
                  :end_date => '11-11-2009'
        }, valid_session
        assigns(:assignments).should eq([assignment])
      end

      it "returns no assignments dates after" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => '',
                  :lname => '',
                  :start_date => '',
                  :end_date => '11-11-2007'
        }, valid_session
        assigns(:assignments).should have(0).Assignment
      end
    end

    #date range tests
    describe "with start_date AND end_date" do
      it "returns assignment dates matching" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => '',
                  :lname => '',
                  :start_date => '11-11-2008',
                  :end_date => '11-11-2008'
        }, valid_session
        assigns(:assignments).should eq([assignment])
      end

      it "returns assignments dates inside range" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => '',
                  :lname => '',
                  :start_date => '11-11-2007',
                  :end_date => '11-11-2009'
        }, valid_session
        assigns(:assignments).should eq([assignment])
      end

      it "returns no assignments before range" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => '',
                  :lname => '',
                  :start_date => '11-11-2009',
                  :end_date => '11-11-2010'
        }, valid_session
        assigns(:assignments).should have(0).Assignment
      end
      
      it "returns no assignments after range" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => '',
                  :lname => '',
                  :start_date => '11-11-2006',
                  :end_date => '11-11-2007'
        }, valid_session
        assigns(:assignments).should have(0).Assignment
      end
    end

    describe "with empty form" do
      it "re-renders 'report' template with error" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => '',
                  :lname => '',
                  :start_date => '',
                  :end_date => ''
        }, valid_session
        response.should redirect_to("/assignments/report_query")
      end
    end
  
    describe "with transfers checked" do
      it "returns transfer_names with equal entires as assignments" do
        assignment = FactoryGirl.create :associated_assignment
        put :report, {:fname => 'John',
                  :lname => '',
                  :start_date => '',
                  :end_date => '',
                  :transfer => '1'
        }, valid_session
        assigns(:transfer_list).compact.count.should == 0
      end
    end
        
    
  end #End PUT Report
end
